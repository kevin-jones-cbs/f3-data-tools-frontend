@page "/"
@using F3Wasm.Models
@using F3Wasm.Data
@inject HttpClient Http

<PageTitle>F3 South Fork Importer</PageTitle>

<style>
    .custom-link {
        cursor: pointer;
    }

    .one-row {
        display: flex;
        flex-direction: row;
    }
</style>

<div class="one-row" style="padding-bottom:12px">
    <Button Color="Color.Primary" Clicked="OnMissingAoButtonClicked">Check for Missing Data</Button>
    @if (isMissingDataLoading)
    {
        <SpinKit Type="SpinKitType.Bounce" />
    }
</div>

@if (missingAos.Count > 0)
{
    <ListGroup style="padding-bottom:12px">
    @foreach (var missing in missingAos)
        {
            <ListGroupItem class="custom-link" Clicked="@(x => OnMissingAoSelected(missing))">@missing.Name -
                @missing.DayOfWeek.ToString() @missing.Date.ToShortDateString()</ListGroupItem>
        }
    </ListGroup>
}


@if (showNoMissingAoMessage)
{
    <Alert Color="Color.Success" ShowIcon Visible>
    All up to date!
        <CloseButton />
    </Alert>
}


<DatePicker TValue="DateTime?" Placeholder="Q Date" Date="@qDate" DateChanged="@OnDateChanged"
    style="margin-bottom:12px;" DisplayFormat="M/dd/yyy" />
<RadioGroup TValue="string" Name="ao" CheckedValue="@ao" CheckedValueChanged="@OnAoChanged" Buttons>
    @foreach (var ao in PaxHelper.AllAos)
    {
        <div style="@ShowOrHideAo(ao)">
            <Radio Value="@(ao.Name)" style="appearance:none">@ao.Name (@ao.City)</Radio>
        </div>
    }
</RadioGroup>

<MemoEdit Rows="5" Placeholder="Paste the Pax Comment from Band" @bind-Text="@comment" style="margin-bottom:12px">
</MemoEdit>
<Button Color="Color.Primary" Clicked="@OnCommentButtonClicked">Submit</Button>

@if (pax.Count > 0)
{
    <Table Narrow>
    <TableHeader>
        <TableRow>
            <TableHeaderCell>Name</TableHeaderCell>
            <TableHeaderCell>Q?</TableHeaderCell>
            <TableHeaderCell>FNG</TableHeaderCell>
            <TableHeaderCell></TableHeaderCell>
        </TableRow>
    </TableHeader>
    <TableBody>
        @foreach (var p in pax.Where(x => x.IsOfficial).ToList())
            {
                <TableRow Color="@(p.IsQ ? Color.Primary : Color.Default)">
                    <TableRowCell>
                        @p.Name
                    </TableRowCell>
                    <TableRowCell>
                        <Check TValue="bool" Checked="@p.IsQ" CheckedChanged="@(isChecked => OnQSelected(p, (bool)isChecked))">
                        </Check>
                    </TableRowCell>
                    <TableRowCell>
                        <Check TValue="bool" Disabled></Check>
                    </TableRowCell>
                    <TableRowCell></TableRowCell>
                </TableRow>
            }

            @foreach (var p in pax.Where(x => !x.IsOfficial).ToList())
            {
                <TableRow Color="@(string.IsNullOrEmpty(p.Name) ? Color.Danger : p.IsFng ? Color.Success : Color.Default)">
                    <TableRowCell>
                        @p.Name

                        @if (p.IsFng)
                        {
                            <TextEdit @bind-Text="@p.Name"></TextEdit>
                        }
                        else
                        {
                            <Autocomplete TItem="String" TValue="string" Data="@allNames" TextField="@(( item ) => item)"
                    ValueField="@(( item ) => item)" @bind-SelectedValue="@p.Name" @bind-SelectedText="@p.UnknownName"
                    Placeholder="Search..." Filter="AutocompleteFilter.StartsWith" FreeTyping
                    CustomFilter="@(( item, searchValue ) => item.IndexOf( searchValue, 0, StringComparison.CurrentCultureIgnoreCase ) >= 0 )">
                            <NotFoundContent> Sorry... @context was not found! :( </NotFoundContent>
                            </Autocomplete>
                        }
                    </TableRowCell>
                    <TableRowCell>
                        <Check TValue="bool" Checked="@p.IsQ" CheckedChanged="@(isChecked => OnQSelected(p, (bool)isChecked))">
                        </Check>
                    </TableRowCell>
                    <TableRowCell>
                        <Check TValue="bool" Checked="@p.IsFng"
                    CheckedChanged="@(isChecked => OnFngSelected(p, (bool)isChecked))"></Check>
                    </TableRowCell>
                    <TableRowCell>
                        <Icon Name="IconName.Times" Clicked="@(e => OnRemovePax(p))" class="custom-link" />
                    </TableRowCell>
                </TableRow>
            }
        </TableBody>
    </Table>

    <div class="one-row" style="padding-bottom:12px">
        <Button Color="Color.Primary" Clicked="@OnUploadButtonClicked" @bind-Disabled="@isLoading">Upload</Button>
        <span style="margin: auto 0px auto 12px;">@pax.Count PAX</span>
        @if (isLoading)
        {
            <SpinKit Type="SpinKitType.Bounce" />
        }
    </div>

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <Alert Color="Color.Danger" Visible>
        <AlertDescription>@errorMessage</AlertDescription>
    </Alert>
    }
}

<Alert Color="Color.Success" @bind-Visible="@showCompleteAlert">
    <AlertMessage>
        Done!
    </AlertMessage>
    <AlertDescription>
        Data has been uploaded to Sheets
    </AlertDescription>
    <CloseButton />
</Alert>


