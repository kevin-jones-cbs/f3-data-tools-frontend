@using F3Core
@using F3Core.Regions
@using F3Wasm.Data
@using F3Wasm.Models

<Row>
    <Column ColumnSize="ColumnSize.Is6">
        <span>Most PAX Posted With</span>
        <ListGroup Mode="ListGroupMode.Selectable" SelectedItem="@selectedPaxPostWithView">
            <ListGroupItem Name="AllTime" Clicked="@(async (r) => await OnSelectedPaxPostWithViewChange("AllTime"))">@allTimeWording</ListGroupItem>
            @{
                int currentStart = historicalPostCount;
                int lastEnd = historicalPostCount;

                for (int i = 0; currentStart < totalPostCount; i++)
                {
                    var local = i;
                    var start = currentStart;
                    var end = ((start / 100) + 1) * 100;
                    end = Math.Min(end, totalPostCount);

                    <ListGroupItem Name="@local.ToString()" Clicked="@(async (r) => await OnSelectedPaxPostWithViewChange(local.ToString()))">@start-@end</ListGroupItem>

                    lastEnd = end;
                    currentStart = end;
                }

                var recentStart = Math.Max(totalPostCount - 100, historicalPostCount);

                // Only add "Recent100" if it doesn't overlap with the last range
                if (recentStart > lastEnd)
                {
                    <ListGroupItem Name="Recent100" Clicked="@(async (r) => await OnSelectedPaxPostWithViewChange("Recent100"))">
                        @recentStart-@totalPostCount
                    </ListGroupItem>
                }
            }

            <span style="margin-top:12px">Most Q'd By</span>
            <ListGroupItem Name="QAllTime" Clicked="@(async (r) => await OnSelectedPaxPostWithViewChange("QAllTime"))">@allTimeWording</ListGroupItem>

            <span style="margin-top:12px">Most Q'd</span>
            <ListGroupItem Name="QOthersAllTime" Clicked="@(async (r) => await OnSelectedPaxPostWithViewChange("QOthersAllTime"))">@allTimeWording</ListGroupItem>
        </ListGroup>
    </Column>
    @if (selectedPaxPostedWith != null && selectedPaxPostedWith.Count > 0 && !selectedPaxPostWithLoading)
    {
        <Column ColumnSize="ColumnSize.Is6">

            <Table Narrow Bordered FixedHeader FixedHeaderTableHeight="440px" FixedHeaderTableMaxHeight="440px">
                <TableHeader>
                    <TableRow>
                        <TableHeaderCell>Pax (@selectedPaxPostWithTotalCount)</TableHeaderCell>
                        <TableHeaderCell>Count </TableHeaderCell>
                    </TableRow>
                </TableHeader>
                <TableBody>
                    @foreach (var paxPoster in selectedPaxPostedWith)
                    {
                        <TableRow>
                            <TableRowCell>@paxPoster.Key</TableRowCell>
                            <TableRowCell>@paxPoster.Value</TableRowCell>
                        </TableRow>
                    }
                </TableBody>
            </Table>
        </Column>
    }

    @if (selectedPaxPostWithLoading)
    {
        <Column ColumnSize="ColumnSize.Is6">
            <div class="center-content">
                <SpinKit Type="SpinKitType.Bounce" />
            </div>
        </Column>
    }
</Row>

@code {
    [Parameter]
    public List<Post> AllPosts { get; set; } = new();
    [Parameter]
    public Region RegionInfo { get; set; }
    [Parameter]
    public List<Post> SelectedPaxPosts { get; set; } = new();
    [Parameter]
    public HistoricalData SelectedPaxHistoricalData { get; set; }

    public Dictionary<string, int> selectedPaxPostedWith { get; set; }
    public string selectedPaxPostWithView { get; set; } = null;
    public bool selectedPaxPostWithLoading { get; set; } = false;
    public int selectedPaxPostWithLimit { get; set; } = 15;
    public int selectedPaxPostWithTotalCount { get; set; }
    public int selectedPax100Count { get; set; }
    public DateTime? firstNonHistoricalDate { get; set; }
    public string allTimeWording;
    public int totalPostCount; // New property for total post count
    public int historicalPostCount;

    protected override void OnInitialized()
    {
        selectedPaxPostedWith = new Dictionary<string, int>();
        historicalPostCount = SelectedPaxHistoricalData == null ? 0 : SelectedPaxHistoricalData.PostCount;
        totalPostCount = historicalPostCount + SelectedPaxPosts.Count;
        selectedPax100Count = (totalPostCount - historicalPostCount + 99) / 100;
        selectedPaxPostWithView = null;
        firstNonHistoricalDate = AllPosts.Min(x => x.Date);
        allTimeWording = SelectedPaxHistoricalData == null ? "All Time" : $"Since {firstNonHistoricalDate.Value.ToString("M/d/yy")}";
    }

    private async Task OnSelectedPaxPostWithViewChange(string index)
    {
        selectedPaxPostedWith = await GetAllTimePaxPostWith(index, SelectedPaxPosts, AllPosts, selectedPax100Count);
        selectedPaxPostWithView = index;
    }

    public async Task<Dictionary<string, int>> GetAllTimePaxPostWith(string index, List<Post> selectedPaxPosts, List<Post> allPosts, int selectedPax100Count)
    {
        List<Post> paxPosts = new List<Post>();
        var newPaxPostedWith = new Dictionary<string, int>();

        selectedPaxPostWithLoading = true;
        await Task.Delay(1);

        // All Time
        if (index == "AllTime" || index == "QAllTime")
        {
            paxPosts = selectedPaxPosts.OrderBy(p => p.Date).ToList();
        }
        else if (index == "Recent100")
        {
            paxPosts = selectedPaxPosts.OrderBy(p => p.Date).Skip(selectedPax100Count * 100).ToList();
        }
        else if (index == "QOthersAllTime")
        {
            paxPosts = selectedPaxPosts.Where(x => x.IsQ).OrderBy(p => p.Date).ToList();
        }
        else
        {
            var intIndex = int.Parse(index);
            paxPosts = selectedPaxPosts.OrderBy(p => p.Date).Skip(intIndex * 100).Take(100).ToList();
        }

        foreach (var paxPost in paxPosts)
        {
            var matched = allPosts.Where(p => p.Date == paxPost.Date && p.Site == paxPost.Site && p.Pax != paxPost.Pax).ToList();
            if (index == "QAllTime")
            {
                matched = matched.Where(p => p.IsQ).ToList();
            }

            foreach (var pax in matched)
            {
                if (newPaxPostedWith.ContainsKey(pax.Pax))
                {
                    newPaxPostedWith[pax.Pax]++;
                }
                else
                {
                    newPaxPostedWith.Add(pax.Pax, 1);
                }
            }
        }

        selectedPaxPostWithTotalCount = newPaxPostedWith.Count;
        var rtn = newPaxPostedWith.OrderByDescending(p => p.Value).Take(selectedPaxPostWithLimit).ToDictionary(p => p.Key, p => p.Value);

        selectedPaxPostWithLoading = false;
        await Task.Delay(1);

        return rtn;
    }
}
