@using Blazorise.DataGrid
@using F3Core
@using F3Wasm.Models
@using System.Text

<style>
    th {
        font-size: 12px;
    }

    table td {
        vertical-align:middle !important;
    }
</style>

<div class="mb-2" style="font-style:italic">The Gold Standard is achieving 200 posts, 12 Q's, 30 Q Source Posts, and 3 Q Source Q's in @DateTime.Now.Year.</div>

<DataGrid TItem="DisplayRow"
          Data="@GoldStandardRows"
          ShowPager="true"
          SortMode="DataGridSortMode.Single"
          PageSize="50"
          Responsive="true"
          ShowPageSizes="true"
          PagerOptions="new(){ ButtonRowPosition=PagerElementPosition.Start }">
    <DataGridColumns>

        <!-- PAX Name -->
        <DataGridColumn TItem="DisplayRow"
                        Caption="Name"
                        Sortable="true"
                        Width="90px"
                        SortField="@nameof(DisplayRow.PaxName)">
            <DisplayTemplate>
                <Span Style="font-weight:600;font-size:12px;vertical-align:middle;">@context.PaxName</Span>
            </DisplayTemplate>
        </DataGridColumn>

        <DataGridColumn TItem="DisplayRow"
                        Caption="Gold Standard %"
                        Filterable="false"
                        Sortable="true">
            <DisplayTemplate>
                <!-- Single flex container, wrapping enabled -->
                <div style="display: flex; flex-wrap: wrap; gap: 8px; align-items: flex-start;">
                    <ProgressContainer Label="Posts" Value="@context.PostCount" MaxValue="PostCountMax" Color="Color.Success" />
                    <ProgressContainer Label="Qs" Value="@context.QCount" MaxValue="QCountMax" Color="Color.Info" />
                    <ProgressContainer Label="Q Source" Value="@context.QSourceCount" MaxValue="QSourceCountMax" Color="Color.Warning" />
                    <ProgressContainer Label="Q Source Qs" Value="@context.QSourceQCount" MaxValue="QSourceQCountMax" Color="Color.Danger" />
                </div>
            </DisplayTemplate>
        </DataGridColumn>

    </DataGridColumns>
</DataGrid>

<button class="btn btn-sm btn-primary mt-2" @onclick="ExportToCsv">Export To Csv</button>

@code {
    [Parameter]
    public AllData AllData { get; set; }

    [Parameter]
    public string FilterValue { get; set; }

    [Inject]
    private IJSRuntime JSRuntime { get; set; }

    public List<DisplayRow> GoldStandardRows { get; set; }

    private static int PostCountMax = 200;
    private static int QCountMax = 12;
    private static int QSourceCountMax = 30;
    private static int QSourceQCountMax = 3;

    protected override void OnParametersSet()
    {
        var thisYear = DateTime.Now.Year;
        var posts = AllData.Posts.Where(x => x.Date.Year == thisYear).ToList();
        var qSourcePosts = AllData.QSourcePosts.Where(x => x.Date.Year == thisYear).ToList();

        var paxPosts = posts.GroupBy(p => p.Pax).ToDictionary(g => g.Key, g => g.OrderBy(x => x.Date).ToList());
        var paxQSourcePosts = qSourcePosts.GroupBy(p => p.Pax).ToDictionary(g => g.Key, g => g.OrderBy(x => x.Date).ToList());

        GoldStandardRows = new List<DisplayRow>();

        foreach (var pax in paxPosts.Keys)
        {
            var postCount = paxPosts[pax].Count;
            var qCount = paxPosts[pax].Count(x => x.IsQ);
            var qSourceCount = paxQSourcePosts.ContainsKey(pax) ? paxQSourcePosts[pax].Count : 0;
            var qSourceQCount = paxQSourcePosts.ContainsKey(pax) ? paxQSourcePosts[pax].Count(x => x.IsQ) : 0;

            GoldStandardRows.Add(new DisplayRow
                {
                    PaxName = pax,
                    PostCount = postCount,
                    QCount = qCount,
                    QSourceCount = qSourceCount,
                    QSourceQCount = qSourceQCount,
                    GoldStandardPercent = GetGoldStandardPercent(postCount, qCount, qSourceCount, qSourceQCount)
                });
        }

        if (!string.IsNullOrEmpty(FilterValue))
        {
            GoldStandardRows = GoldStandardRows
                .Where(row => row.PaxName.Contains(FilterValue, StringComparison.OrdinalIgnoreCase))
                .ToList();
        }

        GoldStandardRows = GoldStandardRows.OrderByDescending(x => x.GoldStandardPercent).ToList();
    }

    private int GetPercent(int value, int max)
    {
        return (int)((double)value / max * 100);
    }

    private int GetGoldStandardPercent(int postCount, int qCount, int qSourceCount, int qSourceQCount)
    {
        var totalReq = PostCountMax + QCountMax + QSourceCountMax + QSourceQCountMax;
        var paxTotal = postCount + qCount + qSourceCount + qSourceQCount;

        var goldStandardPercent = ((double)paxTotal / totalReq) * 100;

        return (int)goldStandardPercent;
    }

    // Example threshold-based style.
    // If the value is >= the threshold, highlight it green.
    private string GetHighlightStyle(int value, int threshold)
    {
        if (value >= threshold)
            return "font-weight:700";
        else
            return "";
    }

    private async Task ExportToCsv()
    {
        var csv = new StringBuilder();

        // Add header row
        csv.AppendLine("PaxName,PostCount,QCount,QSourceCount,QSourceQCount,GSPercent");

        // Add data rows
        foreach (var item in GoldStandardRows)
        {
            csv.AppendLine($"{item.PaxName},{item.PostCount},{item.QCount},{item.QSourceCount},{item.QSourceQCount},{GetGoldStandardPercent(item.PostCount, item.QCount, item.QSourceCount, item.QSourceQCount)}");
        }

        await JSRuntime.InvokeVoidAsync("downloadFile", $"GoldStandard_{DateTime.Now.ToShortDateString()}.csv", csv.ToString());
    }
}
